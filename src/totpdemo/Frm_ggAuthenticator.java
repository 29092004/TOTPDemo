/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package totpdemo;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
/**
 *
 * @author admin
 */
public class Frm_ggAuthenticator extends javax.swing.JFrame {
    private int timeStep = 30; // Thời gian TOTP
    private int counter = 30;
    
     private Timer timer;
    /**
     * Creates new form Frm_ggAuthenticator
     */
    public Frm_ggAuthenticator() {
        initComponents();
        lblTOTP.setText("Mã OTP: " + generateTOTP());
         startCountdown();
    
    }
    private void initComponentss() {

        lblTOTP = new JLabel();
        lbltimer = new JLabel();
        JButton btnClose = new JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Google Authenticator Demo");

        lblTOTP.setFont(new java.awt.Font("Arial", 1, 16)); // Font của mã OTP
        lblTOTP.setHorizontalAlignment(SwingConstants.CENTER);
        lblTOTP.setText("Mã OTP: ");

        lbltimer.setFont(new java.awt.Font("Arial", 0, 14)); // Font của đếm ngược
        lbltimer.setHorizontalAlignment(SwingConstants.CENTER);
        lbltimer.setText("Thời gian còn lại: 30 giây");

        btnClose.setText("Đóng");
        btnClose.addActionListener(evt -> System.exit(0));
        }
     private String generateTOTP() {
        try {
            // Sử dụng hàm giả lập hoặc thay bằng logic tạo mã OTP
            return Generator.generateTOTP(timeStep);
        } catch (Exception ex) {
            System.err.println("Lỗi khi tạo TOTP: " + ex.getMessage());
            return "Lỗi khi tạo OTP";
        }
    }

    // Hàm bắt đầu đếm ngược
    private void startCountdown() {
        counter = 30; // Khởi tạo giá trị đếm ngược
        timer = new Timer(1000, new ActionListener() { // Timer chạy mỗi giây
            @Override
            public void actionPerformed(ActionEvent e) {
                if (counter == 0) {
                    counter = 30; // Reset lại bộ đếm
                    lblTOTP.setText("Mã OTP: " + generateTOTP()); // Hiển thị TOTP mới
                }
                lbltimer.setText("Thời gian còn lại: " + counter + " giây"); // Hiển thị thời gian
                counter--;
            }
        });
        timer.setRepeats(true); // Lặp lại Timer
        timer.start(); // Bắt đầu Timer
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbltimer = new javax.swing.JLabel();
        lblTOTP = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbltimer.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbltimer.setText("Thời Gian ");

        lblTOTP.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTOTP.setText("Mã TOTP");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbltimer, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTOTP, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(lblTOTP, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addComponent(lbltimer)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frm_ggAuthenticator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frm_ggAuthenticator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frm_ggAuthenticator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_ggAuthenticator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frm_ggAuthenticator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblTOTP;
    private javax.swing.JLabel lbltimer;
    // End of variables declaration//GEN-END:variables
}
